{"version":3,"sources":["InfoBox.js","LineGraph.js","Table.js","utils.js","Map.js","App.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","onClick","className","CardContent","Typography","color","gutterBottom","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","parser","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","Table","countries","map","country","casesTypeColors","hex","half_op","multiplier","recovered","deaths","sortData","sortedData","sort","b","prettyPrintStat","stat","showDataOnMap","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","Map","zoom","TileLayer","url","attribution","App","setInputCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9675a706.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n    >\r\n      <CardContent>\r\n        <Typography color=\"textSecondary\" gutterBottom>\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\n//Chart js display options\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          parser: \"false\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\n// building the chart data on daily basics\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\n//fetch the covid data for last 120 days\n\nfunction LineGraph({ casesType }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React from \"react\";\nimport \"./Table.css\";\nimport numeral from \"numeral\";\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      <table>\n        <tbody>\n          {countries.map((country, index) => (\n            <tr key={index}>\n              <td>{country.country}</td>\n              <td>\n                <strong>{numeral(country.cases).format(\"0,0\")}</strong>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default Table;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\n//Case type colours\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\n\n//Sort data for the table in descending order\nexport const sortData = (data) => {\n  let sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\n\n//info box print css\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\n//Display the case type circle and information pop up about countries\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country, index) => (\n    <Circle\n      key={index}\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType] / 5) *\n        casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from \"react\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport \"./Map.css\";\nimport { showDataOnMap } from \"./utils\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport LineGraph from \"./LineGraph\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./utils\";\nimport numeral from \"numeral\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst App = () => {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n  //Fetch data for a particular country\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  //Fetch the Countries value and name\n  //Fetch data for the table\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  //Fetch the data based on the country\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country, index) => (\n                <MenuItem key={index} value={country.value}>\n                  {country.name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <div className=\"app__information\">\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3>Worldwide new {casesType}</h3>\n            <LineGraph casesType={casesType} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}